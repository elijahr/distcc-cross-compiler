_anchors:
  checkout_repo: &checkout_repo
    name: Checkout repo
    uses: actions/checkout@v2
    with:
      fetch-depth: 1
      submodules: recursive

  install_emulation_deps: &install_emulation_deps
    name: Install emulation dependencies
    run: |
      sudo apt-get update -q -y
      sudo apt-get -qq install -y qemu qemu-user-static
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  install_pip_requirements: &install_pip_requirements
    name: Install pip requirements
    run: |
      pip install -r requirements.txt

name: Build {{ distro }} images

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]

jobs:
  {% for host_arch in host_archs %}
  build-{{ host_arch }}-host:
    name: |
      Build {{ distro_slug }} host {{ host_arch }}
    runs-on: ubuntu-latest

    steps:
      - *checkout_repo
      - *install_emulation_deps
      - *install_pip_requirements
      - name: Build host image
        run: |
          ./builder.py build-host \
            --distro {{ distro }} \
            --host-arch {{ host_arch }} \
            --tag $(basename ${{ github.event.ref }})

  build-{{ host_arch }}-clients:
    name: |
      Build {{ distro_slug }} client {% raw %}${{ matrix.compiler_arch }}{% endraw %} (host: {{ host_arch }})
    runs-on: ubuntu-latest
    depends-on: build-{{ host_arch }}-host

    strategy:
      matrix:
        include: {% for compiler_arch in host_arch|compiler_archs %}
          - host_arch: {{ host_arch }}
            compiler_arch: {{ compiler_arch }}
          {% endfor %}

    steps:
      - *checkout_repo
      - *install_emulation_deps
      - *install_pip_requirements
      - name: Build client image
        run: |
          ./builder.py build-client \
            --distro {{ distro }} \
            --host-arch {{ host_arch }} \
            --client-arch {% raw %}${{ matrix.compiler_arch }}{% endraw %} \
            --tag $(basename ${{ github.event.ref }})

      - name: Run tests
        run: |
          ./builder.py test \
            --distro {{ distro }} \
            --host-arch {{ host_arch }} \
            --client-arch {% raw %}${{ matrix.compiler_arch }}{% endraw %} \
            --tag $(basename ${{ github.event.ref }})

  {% endfor %}

  push_manifests:
    name: Push manifests
    if: {% raw %}${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/') }}{% endraw %}

    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        version: [ latest, '{% raw %}${{ github.ref }}{% endraw %}' ]

    steps:
      - *checkout_repo

      - name: Push manifest
        run: |
          echo {% raw %}${{ secrets.DOCKERHUB_TOKEN }}{% endraw %} | docker login \
            -u elijahru --password-stdin
          docker images
          ./scripts/push-manifests-debian.sh \
            $(basename {% raw %}${{ matrix.version }}{% endraw %}) \
            debian-buster
